defmodule TodoHaiku.Application do
  # See https://hexdocs.pm/elixir/Application.html
  # for more information on OTP Applications
  @moduledoc false

  use Application
  require Logger

  @impl true
  def start(_type, _args) do
    # Load .env file in development
    if Mix.env() in [:dev, :test] do
      # Debug prints to verify environment variables before loading
      Logger.info("Before loading .env: GITHUB_CLIENT_ID=#{System.get_env("GITHUB_CLIENT_ID")}")

      # Load environment variables directly from the .env file as a fallback
      if File.exists?(".env") do
        Logger.info(".env file exists, loading manually")
        File.read!(".env")
        |> String.split("\n", trim: true)
        |> Enum.each(fn line ->
          case String.split(line, "=", parts: 2) do
            [key, value] ->
              if System.get_env(key) == nil do
                Logger.info("Setting #{key} from .env file")
                System.put_env(key, value)
              end
            _ -> :ok
          end
        end)
      end

      # Debug prints to verify environment variables after manual loading
      Logger.info("After loading .env: GITHUB_CLIENT_ID=#{System.get_env("GITHUB_CLIENT_ID")}")
    end

    children = [
      TodoHaikuWeb.Telemetry,
      TodoHaiku.Repo,
      {DNSCluster, query: Application.get_env(:todo_haiku, :dns_cluster_query) || :ignore},
      {Phoenix.PubSub, name: TodoHaiku.PubSub},
      # Start the Finch HTTP client for sending emails
      {Finch, name: TodoHaiku.Finch},
      # Start a worker by calling: TodoHaiku.Worker.start_link(arg)
      # {TodoHaiku.Worker, arg},
      # Start to serve requests, typically the last entry
      TodoHaikuWeb.Endpoint
    ]

    # See https://hexdocs.pm/elixir/Supervisor.html
    # for other strategies and supported options
    opts = [strategy: :one_for_one, name: TodoHaiku.Supervisor]
    Supervisor.start_link(children, opts)
  end

  # Tell Phoenix to update the endpoint configuration
  # whenever the application is updated.
  @impl true
  def config_change(changed, _new, removed) do
    TodoHaikuWeb.Endpoint.config_change(changed, removed)
    :ok
  end
end
